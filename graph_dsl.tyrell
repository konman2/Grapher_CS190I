# First, specify the types that will be used
enum RawNode{
    "1","2"
}
value Graph {
    num_edges: int;
	num_nodes: int;
}
value Node;
value Empty;

# Next, specify the input/output of the synthesized program
program G(Graph) -> Graph;

# Finally, specify the production rules
func empty: Empty -> Empty;
func get_node: Node -> RawNode;
func plus_node: Node a -> Node b;
func remove_node: Graph n -> Graph a, Node v {
    num_nodes(n) <= num_nodes(a);
    num_edges(n) <= num_edges(a);
}

func add_node: Graph n -> Graph a{
    num_nodes(n) > num_nodes(a);
    num_edges(n) == num_edges(a);
}

func remove_edge: Graph n -> Graph a, Node v, Node u {
    num_nodes(n) <= num_nodes(a);
    num_edges(n) <= num_edges(a);
}
func add_edge: Graph n -> Graph a, Node v, Node u{
    num_nodes(n) >= num_nodes(a);
    num_edges(n) == num_edges(a);
}
